{
    "sourceFile": "src/contexts/AuthProvider.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1663445201136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1663445201136,
            "name": "Commit-0",
            "content": "import React, { createContext, useState } from \"react\";\nimport firebase from \"../firebase\";\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [authLoading, setAuthLoading] = useState(true);\n\n    const login = async (email, password) => {\n        try {\n            setLoading(true);\n            await firebase.auth().signInWithEmailAndPassword(email, password);\n            setLoading(false);\n        } catch (err) {\n            setError(err.message);\n            setLoading(false);\n        }\n    };\n\n    const register = async (email, password, confirmPassword) => {\n        if (password !== confirmPassword) {\n            setError(\"Passwords don't match!\");\n            return;\n        }\n        debugger;\n        try {\n            setLoading(true);\n            await firebase\n                .auth()\n                .createUserWithEmailAndPassword(email, password);\n            setLoading(false);\n        } catch (err) {\n            setError(err.message);\n            setLoading(false);\n        }\n    };\n\n    const logout = async () => {\n        await firebase.auth().signOut();\n    };\n\n    firebase.auth().onAuthStateChanged(function (userObj) {\n        if (userObj) {\n            setUser(userObj);\n            setAuthLoading(false);\n            setLoading(false);\n            setError(null);\n        } else {\n            setUser(null);\n            setAuthLoading(false);\n        }\n    });\n\n    return (\n        <AuthContext.Provider\n            value={{\n                user,\n                loading,\n                error,\n                login,\n                register,\n                logout,\n                authLoading,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n"
        }
    ]
}